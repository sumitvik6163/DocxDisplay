{"ast":null,"code":"var StringSource = module.exports = function (string, description) {\n  var self = {\n    asString: function () {\n      return string;\n    },\n    range: function (startIndex, endIndex) {\n      return new StringSourceRange(string, description, startIndex, endIndex);\n    }\n  };\n  return self;\n};\nvar StringSourceRange = function (string, description, startIndex, endIndex) {\n  this._string = string;\n  this._description = description;\n  this._startIndex = startIndex;\n  this._endIndex = endIndex;\n};\nStringSourceRange.prototype.to = function (otherRange) {\n  // TODO: Assert that tokens are the same across both iterators\n  return new StringSourceRange(this._string, this._description, this._startIndex, otherRange._endIndex);\n};\nStringSourceRange.prototype.describe = function () {\n  var position = this._position();\n  var description = this._description ? this._description + \"\\n\" : \"\";\n  return description + \"Line number: \" + position.lineNumber + \"\\nCharacter number: \" + position.characterNumber;\n};\nStringSourceRange.prototype.lineNumber = function () {\n  return this._position().lineNumber;\n};\nStringSourceRange.prototype.characterNumber = function () {\n  return this._position().characterNumber;\n};\nStringSourceRange.prototype._position = function () {\n  var self = this;\n  var index = 0;\n  var nextNewLine = function () {\n    return self._string.indexOf(\"\\n\", index);\n  };\n  var lineNumber = 1;\n  while (nextNewLine() !== -1 && nextNewLine() < this._startIndex) {\n    index = nextNewLine() + 1;\n    lineNumber += 1;\n  }\n  var characterNumber = this._startIndex - index + 1;\n  return {\n    lineNumber: lineNumber,\n    characterNumber: characterNumber\n  };\n};","map":{"version":3,"names":["StringSource","module","exports","string","description","self","asString","range","startIndex","endIndex","StringSourceRange","_string","_description","_startIndex","_endIndex","prototype","to","otherRange","describe","position","_position","lineNumber","characterNumber","index","nextNewLine","indexOf"],"sources":["D:/sumit/hfc/wrm/node_modules/lop/lib/StringSource.js"],"sourcesContent":["var StringSource = module.exports = function(string, description) {\n    var self = {\n        asString: function() {\n            return string;\n        },\n        range: function(startIndex, endIndex) {\n            return new StringSourceRange(string, description, startIndex, endIndex);\n        }\n    };\n    return self;\n};\n\nvar StringSourceRange = function(string, description, startIndex, endIndex) {\n    this._string = string;\n    this._description = description;\n    this._startIndex = startIndex;\n    this._endIndex = endIndex;\n};\n\nStringSourceRange.prototype.to = function(otherRange) {\n    // TODO: Assert that tokens are the same across both iterators\n    return new StringSourceRange(this._string, this._description, this._startIndex, otherRange._endIndex);\n};\n\nStringSourceRange.prototype.describe = function() {\n    var position = this._position();\n    var description = this._description ? this._description + \"\\n\" : \"\";\n    return description + \"Line number: \" + position.lineNumber + \"\\nCharacter number: \" + position.characterNumber;\n};\n\nStringSourceRange.prototype.lineNumber = function() {\n    return this._position().lineNumber;\n};\n\nStringSourceRange.prototype.characterNumber = function() {\n    return this._position().characterNumber;\n};\n\nStringSourceRange.prototype._position = function() {\n    var self = this;\n    var index = 0;\n    var nextNewLine = function() {\n        return self._string.indexOf(\"\\n\", index);\n    };\n\n    var lineNumber = 1;\n    while (nextNewLine() !== -1 && nextNewLine() < this._startIndex) {\n        index = nextNewLine() + 1;\n        lineNumber += 1;\n    }\n    var characterNumber = this._startIndex - index + 1;\n    return {lineNumber: lineNumber, characterNumber: characterNumber};\n};\n"],"mappings":"AAAA,IAAIA,YAAY,GAAGC,MAAM,CAACC,OAAO,GAAG,UAASC,MAAM,EAAEC,WAAW,EAAE;EAC9D,IAAIC,IAAI,GAAG;IACPC,QAAQ,EAAE,SAAAA,CAAA,EAAW;MACjB,OAAOH,MAAM;IACjB,CAAC;IACDI,KAAK,EAAE,SAAAA,CAASC,UAAU,EAAEC,QAAQ,EAAE;MAClC,OAAO,IAAIC,iBAAiB,CAACP,MAAM,EAAEC,WAAW,EAAEI,UAAU,EAAEC,QAAQ,CAAC;IAC3E;EACJ,CAAC;EACD,OAAOJ,IAAI;AACf,CAAC;AAED,IAAIK,iBAAiB,GAAG,SAAAA,CAASP,MAAM,EAAEC,WAAW,EAAEI,UAAU,EAAEC,QAAQ,EAAE;EACxE,IAAI,CAACE,OAAO,GAAGR,MAAM;EACrB,IAAI,CAACS,YAAY,GAAGR,WAAW;EAC/B,IAAI,CAACS,WAAW,GAAGL,UAAU;EAC7B,IAAI,CAACM,SAAS,GAAGL,QAAQ;AAC7B,CAAC;AAEDC,iBAAiB,CAACK,SAAS,CAACC,EAAE,GAAG,UAASC,UAAU,EAAE;EAClD;EACA,OAAO,IAAIP,iBAAiB,CAAC,IAAI,CAACC,OAAO,EAAE,IAAI,CAACC,YAAY,EAAE,IAAI,CAACC,WAAW,EAAEI,UAAU,CAACH,SAAS,CAAC;AACzG,CAAC;AAEDJ,iBAAiB,CAACK,SAAS,CAACG,QAAQ,GAAG,YAAW;EAC9C,IAAIC,QAAQ,GAAG,IAAI,CAACC,SAAS,CAAC,CAAC;EAC/B,IAAIhB,WAAW,GAAG,IAAI,CAACQ,YAAY,GAAG,IAAI,CAACA,YAAY,GAAG,IAAI,GAAG,EAAE;EACnE,OAAOR,WAAW,GAAG,eAAe,GAAGe,QAAQ,CAACE,UAAU,GAAG,sBAAsB,GAAGF,QAAQ,CAACG,eAAe;AAClH,CAAC;AAEDZ,iBAAiB,CAACK,SAAS,CAACM,UAAU,GAAG,YAAW;EAChD,OAAO,IAAI,CAACD,SAAS,CAAC,CAAC,CAACC,UAAU;AACtC,CAAC;AAEDX,iBAAiB,CAACK,SAAS,CAACO,eAAe,GAAG,YAAW;EACrD,OAAO,IAAI,CAACF,SAAS,CAAC,CAAC,CAACE,eAAe;AAC3C,CAAC;AAEDZ,iBAAiB,CAACK,SAAS,CAACK,SAAS,GAAG,YAAW;EAC/C,IAAIf,IAAI,GAAG,IAAI;EACf,IAAIkB,KAAK,GAAG,CAAC;EACb,IAAIC,WAAW,GAAG,SAAAA,CAAA,EAAW;IACzB,OAAOnB,IAAI,CAACM,OAAO,CAACc,OAAO,CAAC,IAAI,EAAEF,KAAK,CAAC;EAC5C,CAAC;EAED,IAAIF,UAAU,GAAG,CAAC;EAClB,OAAOG,WAAW,CAAC,CAAC,KAAK,CAAC,CAAC,IAAIA,WAAW,CAAC,CAAC,GAAG,IAAI,CAACX,WAAW,EAAE;IAC7DU,KAAK,GAAGC,WAAW,CAAC,CAAC,GAAG,CAAC;IACzBH,UAAU,IAAI,CAAC;EACnB;EACA,IAAIC,eAAe,GAAG,IAAI,CAACT,WAAW,GAAGU,KAAK,GAAG,CAAC;EAClD,OAAO;IAACF,UAAU,EAAEA,UAAU;IAAEC,eAAe,EAAEA;EAAe,CAAC;AACrE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}