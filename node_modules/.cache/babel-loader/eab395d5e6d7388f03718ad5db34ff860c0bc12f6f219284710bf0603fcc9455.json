{"ast":null,"code":"exports.read = read;\nexports._findPartPaths = findPartPaths;\nvar promises = require(\"../promises\");\nvar documents = require(\"../documents\");\nvar Result = require(\"../results\").Result;\nvar zipfile = require(\"../zipfile\");\nvar readXmlFromZipFile = require(\"./office-xml-reader\").readXmlFromZipFile;\nvar createBodyReader = require(\"./body-reader\").createBodyReader;\nvar DocumentXmlReader = require(\"./document-xml-reader\").DocumentXmlReader;\nvar relationshipsReader = require(\"./relationships-reader\");\nvar contentTypesReader = require(\"./content-types-reader\");\nvar numberingXml = require(\"./numbering-xml\");\nvar stylesReader = require(\"./styles-reader\");\nvar notesReader = require(\"./notes-reader\");\nvar commentsReader = require(\"./comments-reader\");\nvar Files = require(\"./files\").Files;\nfunction read(docxFile, input) {\n  input = input || {};\n  return promises.props({\n    contentTypes: readContentTypesFromZipFile(docxFile),\n    partPaths: findPartPaths(docxFile),\n    docxFile: docxFile,\n    files: input.path ? Files.relativeToFile(input.path) : new Files(null)\n  }).also(function (result) {\n    return {\n      styles: readStylesFromZipFile(docxFile, result.partPaths.styles)\n    };\n  }).also(function (result) {\n    return {\n      numbering: readNumberingFromZipFile(docxFile, result.partPaths.numbering, result.styles)\n    };\n  }).also(function (result) {\n    return {\n      footnotes: readXmlFileWithBody(result.partPaths.footnotes, result, function (bodyReader, xml) {\n        if (xml) {\n          return notesReader.createFootnotesReader(bodyReader)(xml);\n        } else {\n          return new Result([]);\n        }\n      }),\n      endnotes: readXmlFileWithBody(result.partPaths.endnotes, result, function (bodyReader, xml) {\n        if (xml) {\n          return notesReader.createEndnotesReader(bodyReader)(xml);\n        } else {\n          return new Result([]);\n        }\n      }),\n      comments: readXmlFileWithBody(result.partPaths.comments, result, function (bodyReader, xml) {\n        if (xml) {\n          return commentsReader.createCommentsReader(bodyReader)(xml);\n        } else {\n          return new Result([]);\n        }\n      })\n    };\n  }).also(function (result) {\n    return {\n      notes: result.footnotes.flatMap(function (footnotes) {\n        return result.endnotes.map(function (endnotes) {\n          return new documents.Notes(footnotes.concat(endnotes));\n        });\n      })\n    };\n  }).then(function (result) {\n    return readXmlFileWithBody(result.partPaths.mainDocument, result, function (bodyReader, xml) {\n      return result.notes.flatMap(function (notes) {\n        return result.comments.flatMap(function (comments) {\n          var reader = new DocumentXmlReader({\n            bodyReader: bodyReader,\n            notes: notes,\n            comments: comments\n          });\n          return reader.convertXmlToDocument(xml);\n        });\n      });\n    });\n  });\n}\nfunction findPartPaths(docxFile) {\n  return readPackageRelationships(docxFile).then(function (packageRelationships) {\n    var mainDocumentPath = findPartPath({\n      docxFile: docxFile,\n      relationships: packageRelationships,\n      relationshipType: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\",\n      basePath: \"\",\n      fallbackPath: \"word/document.xml\"\n    });\n    if (!docxFile.exists(mainDocumentPath)) {\n      throw new Error(\"Could not find main document part. Are you sure this is a valid .docx file?\");\n    }\n    return xmlFileReader({\n      filename: relationshipsFilename(mainDocumentPath),\n      readElement: relationshipsReader.readRelationships,\n      defaultValue: relationshipsReader.defaultValue\n    })(docxFile).then(function (documentRelationships) {\n      function findPartRelatedToMainDocument(name) {\n        return findPartPath({\n          docxFile: docxFile,\n          relationships: documentRelationships,\n          relationshipType: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/\" + name,\n          basePath: zipfile.splitPath(mainDocumentPath).dirname,\n          fallbackPath: \"word/\" + name + \".xml\"\n        });\n      }\n      return {\n        mainDocument: mainDocumentPath,\n        comments: findPartRelatedToMainDocument(\"comments\"),\n        endnotes: findPartRelatedToMainDocument(\"endnotes\"),\n        footnotes: findPartRelatedToMainDocument(\"footnotes\"),\n        numbering: findPartRelatedToMainDocument(\"numbering\"),\n        styles: findPartRelatedToMainDocument(\"styles\")\n      };\n    });\n  });\n}\nfunction findPartPath(options) {\n  var docxFile = options.docxFile;\n  var relationships = options.relationships;\n  var relationshipType = options.relationshipType;\n  var basePath = options.basePath;\n  var fallbackPath = options.fallbackPath;\n  var targets = relationships.findTargetsByType(relationshipType);\n  var normalisedTargets = targets.map(function (target) {\n    return stripPrefix(zipfile.joinPath(basePath, target), \"/\");\n  });\n  var validTargets = normalisedTargets.filter(function (target) {\n    return docxFile.exists(target);\n  });\n  if (validTargets.length === 0) {\n    return fallbackPath;\n  } else {\n    return validTargets[0];\n  }\n}\nfunction stripPrefix(value, prefix) {\n  if (value.substring(0, prefix.length) === prefix) {\n    return value.substring(prefix.length);\n  } else {\n    return value;\n  }\n}\nfunction xmlFileReader(options) {\n  return function (zipFile) {\n    return readXmlFromZipFile(zipFile, options.filename).then(function (element) {\n      return element ? options.readElement(element) : options.defaultValue;\n    });\n  };\n}\nfunction readXmlFileWithBody(filename, options, func) {\n  var readRelationshipsFromZipFile = xmlFileReader({\n    filename: relationshipsFilename(filename),\n    readElement: relationshipsReader.readRelationships,\n    defaultValue: relationshipsReader.defaultValue\n  });\n  return readRelationshipsFromZipFile(options.docxFile).then(function (relationships) {\n    var bodyReader = new createBodyReader({\n      relationships: relationships,\n      contentTypes: options.contentTypes,\n      docxFile: options.docxFile,\n      numbering: options.numbering,\n      styles: options.styles,\n      files: options.files\n    });\n    return readXmlFromZipFile(options.docxFile, filename).then(function (xml) {\n      return func(bodyReader, xml);\n    });\n  });\n}\nfunction relationshipsFilename(filename) {\n  var split = zipfile.splitPath(filename);\n  return zipfile.joinPath(split.dirname, \"_rels\", split.basename + \".rels\");\n}\nvar readContentTypesFromZipFile = xmlFileReader({\n  filename: \"[Content_Types].xml\",\n  readElement: contentTypesReader.readContentTypesFromXml,\n  defaultValue: contentTypesReader.defaultContentTypes\n});\nfunction readNumberingFromZipFile(zipFile, path, styles) {\n  return xmlFileReader({\n    filename: path,\n    readElement: function (element) {\n      return numberingXml.readNumberingXml(element, {\n        styles: styles\n      });\n    },\n    defaultValue: numberingXml.defaultNumbering\n  })(zipFile);\n}\nfunction readStylesFromZipFile(zipFile, path) {\n  return xmlFileReader({\n    filename: path,\n    readElement: stylesReader.readStylesXml,\n    defaultValue: stylesReader.defaultStyles\n  })(zipFile);\n}\nvar readPackageRelationships = xmlFileReader({\n  filename: \"_rels/.rels\",\n  readElement: relationshipsReader.readRelationships,\n  defaultValue: relationshipsReader.defaultValue\n});","map":{"version":3,"names":["exports","read","_findPartPaths","findPartPaths","promises","require","documents","Result","zipfile","readXmlFromZipFile","createBodyReader","DocumentXmlReader","relationshipsReader","contentTypesReader","numberingXml","stylesReader","notesReader","commentsReader","Files","docxFile","input","props","contentTypes","readContentTypesFromZipFile","partPaths","files","path","relativeToFile","also","result","styles","readStylesFromZipFile","numbering","readNumberingFromZipFile","footnotes","readXmlFileWithBody","bodyReader","xml","createFootnotesReader","endnotes","createEndnotesReader","comments","createCommentsReader","notes","flatMap","map","Notes","concat","then","mainDocument","reader","convertXmlToDocument","readPackageRelationships","packageRelationships","mainDocumentPath","findPartPath","relationships","relationshipType","basePath","fallbackPath","exists","Error","xmlFileReader","filename","relationshipsFilename","readElement","readRelationships","defaultValue","documentRelationships","findPartRelatedToMainDocument","name","splitPath","dirname","options","targets","findTargetsByType","normalisedTargets","target","stripPrefix","joinPath","validTargets","filter","length","value","prefix","substring","zipFile","element","func","readRelationshipsFromZipFile","split","basename","readContentTypesFromXml","defaultContentTypes","readNumberingXml","defaultNumbering","readStylesXml","defaultStyles"],"sources":["D:/sumit/hfc/wrm/node_modules/mammoth/lib/docx/docx-reader.js"],"sourcesContent":["exports.read = read;\nexports._findPartPaths = findPartPaths;\n\nvar promises = require(\"../promises\");\nvar documents = require(\"../documents\");\nvar Result = require(\"../results\").Result;\nvar zipfile = require(\"../zipfile\");\n\nvar readXmlFromZipFile = require(\"./office-xml-reader\").readXmlFromZipFile;\nvar createBodyReader = require(\"./body-reader\").createBodyReader;\nvar DocumentXmlReader = require(\"./document-xml-reader\").DocumentXmlReader;\nvar relationshipsReader = require(\"./relationships-reader\");\nvar contentTypesReader = require(\"./content-types-reader\");\nvar numberingXml = require(\"./numbering-xml\");\nvar stylesReader = require(\"./styles-reader\");\nvar notesReader = require(\"./notes-reader\");\nvar commentsReader = require(\"./comments-reader\");\nvar Files = require(\"./files\").Files;\n\n\nfunction read(docxFile, input) {\n    input = input || {};\n\n    return promises.props({\n        contentTypes: readContentTypesFromZipFile(docxFile),\n        partPaths: findPartPaths(docxFile),\n        docxFile: docxFile,\n        files: input.path ? Files.relativeToFile(input.path) : new Files(null)\n    }).also(function(result) {\n        return {\n            styles: readStylesFromZipFile(docxFile, result.partPaths.styles)\n        };\n    }).also(function(result) {\n        return {\n            numbering: readNumberingFromZipFile(docxFile, result.partPaths.numbering, result.styles)\n        };\n    }).also(function(result) {\n        return {\n            footnotes: readXmlFileWithBody(result.partPaths.footnotes, result, function(bodyReader, xml) {\n                if (xml) {\n                    return notesReader.createFootnotesReader(bodyReader)(xml);\n                } else {\n                    return new Result([]);\n                }\n            }),\n            endnotes: readXmlFileWithBody(result.partPaths.endnotes, result, function(bodyReader, xml) {\n                if (xml) {\n                    return notesReader.createEndnotesReader(bodyReader)(xml);\n                } else {\n                    return new Result([]);\n                }\n            }),\n            comments: readXmlFileWithBody(result.partPaths.comments, result, function(bodyReader, xml) {\n                if (xml) {\n                    return commentsReader.createCommentsReader(bodyReader)(xml);\n                } else {\n                    return new Result([]);\n                }\n            })\n        };\n    }).also(function(result) {\n        return {\n            notes: result.footnotes.flatMap(function(footnotes) {\n                return result.endnotes.map(function(endnotes) {\n                    return new documents.Notes(footnotes.concat(endnotes));\n                });\n            })\n        };\n    }).then(function(result) {\n        return readXmlFileWithBody(result.partPaths.mainDocument, result, function(bodyReader, xml) {\n            return result.notes.flatMap(function(notes) {\n                return result.comments.flatMap(function(comments) {\n                    var reader = new DocumentXmlReader({\n                        bodyReader: bodyReader,\n                        notes: notes,\n                        comments: comments\n                    });\n                    return reader.convertXmlToDocument(xml);\n                });\n            });\n        });\n    });\n}\n\nfunction findPartPaths(docxFile) {\n    return readPackageRelationships(docxFile).then(function(packageRelationships) {\n        var mainDocumentPath = findPartPath({\n            docxFile: docxFile,\n            relationships: packageRelationships,\n            relationshipType: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\",\n            basePath: \"\",\n            fallbackPath: \"word/document.xml\"\n        });\n\n        if (!docxFile.exists(mainDocumentPath)) {\n            throw new Error(\"Could not find main document part. Are you sure this is a valid .docx file?\");\n        }\n\n        return xmlFileReader({\n            filename: relationshipsFilename(mainDocumentPath),\n            readElement: relationshipsReader.readRelationships,\n            defaultValue: relationshipsReader.defaultValue\n        })(docxFile).then(function(documentRelationships) {\n            function findPartRelatedToMainDocument(name) {\n                return findPartPath({\n                    docxFile: docxFile,\n                    relationships: documentRelationships,\n                    relationshipType: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/\" + name,\n                    basePath: zipfile.splitPath(mainDocumentPath).dirname,\n                    fallbackPath: \"word/\" + name + \".xml\"\n                });\n            }\n\n            return {\n                mainDocument: mainDocumentPath,\n                comments: findPartRelatedToMainDocument(\"comments\"),\n                endnotes: findPartRelatedToMainDocument(\"endnotes\"),\n                footnotes: findPartRelatedToMainDocument(\"footnotes\"),\n                numbering: findPartRelatedToMainDocument(\"numbering\"),\n                styles: findPartRelatedToMainDocument(\"styles\")\n            };\n        });\n    });\n}\n\nfunction findPartPath(options) {\n    var docxFile = options.docxFile;\n    var relationships = options.relationships;\n    var relationshipType = options.relationshipType;\n    var basePath = options.basePath;\n    var fallbackPath = options.fallbackPath;\n\n    var targets = relationships.findTargetsByType(relationshipType);\n    var normalisedTargets = targets.map(function(target) {\n        return stripPrefix(zipfile.joinPath(basePath, target), \"/\");\n    });\n    var validTargets = normalisedTargets.filter(function(target) {\n        return docxFile.exists(target);\n    });\n    if (validTargets.length === 0) {\n        return fallbackPath;\n    } else {\n        return validTargets[0];\n    }\n}\n\nfunction stripPrefix(value, prefix) {\n    if (value.substring(0, prefix.length) === prefix) {\n        return value.substring(prefix.length);\n    } else {\n        return value;\n    }\n}\n\nfunction xmlFileReader(options) {\n    return function(zipFile) {\n        return readXmlFromZipFile(zipFile, options.filename)\n            .then(function(element) {\n                return element ? options.readElement(element) : options.defaultValue;\n            });\n    };\n}\n\nfunction readXmlFileWithBody(filename, options, func) {\n    var readRelationshipsFromZipFile = xmlFileReader({\n        filename: relationshipsFilename(filename),\n        readElement: relationshipsReader.readRelationships,\n        defaultValue: relationshipsReader.defaultValue\n    });\n\n    return readRelationshipsFromZipFile(options.docxFile).then(function(relationships) {\n        var bodyReader = new createBodyReader({\n            relationships: relationships,\n            contentTypes: options.contentTypes,\n            docxFile: options.docxFile,\n            numbering: options.numbering,\n            styles: options.styles,\n            files: options.files\n        });\n        return readXmlFromZipFile(options.docxFile, filename)\n            .then(function(xml) {\n                return func(bodyReader, xml);\n            });\n    });\n}\n\nfunction relationshipsFilename(filename) {\n    var split = zipfile.splitPath(filename);\n    return zipfile.joinPath(split.dirname, \"_rels\", split.basename + \".rels\");\n}\n\nvar readContentTypesFromZipFile = xmlFileReader({\n    filename: \"[Content_Types].xml\",\n    readElement: contentTypesReader.readContentTypesFromXml,\n    defaultValue: contentTypesReader.defaultContentTypes\n});\n\nfunction readNumberingFromZipFile(zipFile, path, styles) {\n    return xmlFileReader({\n        filename: path,\n        readElement: function(element) {\n            return numberingXml.readNumberingXml(element, {styles: styles});\n        },\n        defaultValue: numberingXml.defaultNumbering\n    })(zipFile);\n}\n\nfunction readStylesFromZipFile(zipFile, path) {\n    return xmlFileReader({\n        filename: path,\n        readElement: stylesReader.readStylesXml,\n        defaultValue: stylesReader.defaultStyles\n    })(zipFile);\n}\n\nvar readPackageRelationships = xmlFileReader({\n    filename: \"_rels/.rels\",\n    readElement: relationshipsReader.readRelationships,\n    defaultValue: relationshipsReader.defaultValue\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}