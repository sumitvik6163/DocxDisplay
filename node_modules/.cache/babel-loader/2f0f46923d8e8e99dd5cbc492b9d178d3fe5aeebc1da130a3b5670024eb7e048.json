{"ast":null,"code":"var _ = require(\"underscore\");\nvar promises = require(\"./promises\");\nvar documents = require(\"./documents\");\nvar htmlPaths = require(\"./styles/html-paths\");\nvar results = require(\"./results\");\nvar images = require(\"./images\");\nvar Html = require(\"./html\");\nvar writers = require(\"./writers\");\nexports.DocumentConverter = DocumentConverter;\nfunction DocumentConverter(options) {\n  return {\n    convertToHtml: function (element) {\n      var comments = _.indexBy(element.type === documents.types.document ? element.comments : [], \"commentId\");\n      var conversion = new DocumentConversion(options, comments);\n      return conversion.convertToHtml(element);\n    }\n  };\n}\nfunction DocumentConversion(options, comments) {\n  var noteNumber = 1;\n  var noteReferences = [];\n  var referencedComments = [];\n  options = _.extend({\n    ignoreEmptyParagraphs: true\n  }, options);\n  var idPrefix = options.idPrefix === undefined ? \"\" : options.idPrefix;\n  var ignoreEmptyParagraphs = options.ignoreEmptyParagraphs;\n  var defaultParagraphStyle = htmlPaths.topLevelElement(\"p\");\n  var styleMap = options.styleMap || [];\n  function convertToHtml(document) {\n    var messages = [];\n    var html = elementToHtml(document, messages, {});\n    var deferredNodes = [];\n    walkHtml(html, function (node) {\n      if (node.type === \"deferred\") {\n        deferredNodes.push(node);\n      }\n    });\n    var deferredValues = {};\n    return promises.mapSeries(deferredNodes, function (deferred) {\n      return deferred.value().then(function (value) {\n        deferredValues[deferred.id] = value;\n      });\n    }).then(function () {\n      function replaceDeferred(nodes) {\n        return flatMap(nodes, function (node) {\n          if (node.type === \"deferred\") {\n            return deferredValues[node.id];\n          } else if (node.children) {\n            return [_.extend({}, node, {\n              children: replaceDeferred(node.children)\n            })];\n          } else {\n            return [node];\n          }\n        });\n      }\n      var writer = writers.writer({\n        prettyPrint: options.prettyPrint,\n        outputFormat: options.outputFormat\n      });\n      Html.write(writer, Html.simplify(replaceDeferred(html)));\n      return new results.Result(writer.asString(), messages);\n    });\n  }\n  function convertElements(elements, messages, options) {\n    return flatMap(elements, function (element) {\n      return elementToHtml(element, messages, options);\n    });\n  }\n  function elementToHtml(element, messages, options) {\n    if (!options) {\n      throw new Error(\"options not set\");\n    }\n    var handler = elementConverters[element.type];\n    if (handler) {\n      return handler(element, messages, options);\n    } else {\n      return [];\n    }\n  }\n  function convertParagraph(element, messages, options) {\n    return htmlPathForParagraph(element, messages).wrap(function () {\n      var content = convertElements(element.children, messages, options);\n      if (ignoreEmptyParagraphs) {\n        return content;\n      } else {\n        return [Html.forceWrite].concat(content);\n      }\n    });\n  }\n  function htmlPathForParagraph(element, messages) {\n    var style = findStyle(element);\n    if (style) {\n      return style.to;\n    } else {\n      if (element.styleId) {\n        messages.push(unrecognisedStyleWarning(\"paragraph\", element));\n      }\n      return defaultParagraphStyle;\n    }\n  }\n  function convertRun(run, messages, options) {\n    var nodes = function () {\n      return convertElements(run.children, messages, options);\n    };\n    var paths = [];\n    if (run.highlight !== null) {\n      var path = findHtmlPath({\n        type: \"highlight\",\n        color: run.highlight\n      });\n      if (path) {\n        paths.push(path);\n      }\n    }\n    if (run.isSmallCaps) {\n      paths.push(findHtmlPathForRunProperty(\"smallCaps\"));\n    }\n    if (run.isAllCaps) {\n      paths.push(findHtmlPathForRunProperty(\"allCaps\"));\n    }\n    if (run.isStrikethrough) {\n      paths.push(findHtmlPathForRunProperty(\"strikethrough\", \"s\"));\n    }\n    if (run.isUnderline) {\n      paths.push(findHtmlPathForRunProperty(\"underline\"));\n    }\n    if (run.verticalAlignment === documents.verticalAlignment.subscript) {\n      paths.push(htmlPaths.element(\"sub\", {}, {\n        fresh: false\n      }));\n    }\n    if (run.verticalAlignment === documents.verticalAlignment.superscript) {\n      paths.push(htmlPaths.element(\"sup\", {}, {\n        fresh: false\n      }));\n    }\n    if (run.isItalic) {\n      paths.push(findHtmlPathForRunProperty(\"italic\", \"em\"));\n    }\n    if (run.isBold) {\n      paths.push(findHtmlPathForRunProperty(\"bold\", \"strong\"));\n    }\n    var stylePath = htmlPaths.empty;\n    var style = findStyle(run);\n    if (style) {\n      stylePath = style.to;\n    } else if (run.styleId) {\n      messages.push(unrecognisedStyleWarning(\"run\", run));\n    }\n    paths.push(stylePath);\n    paths.forEach(function (path) {\n      nodes = path.wrap.bind(path, nodes);\n    });\n    return nodes();\n  }\n  function findHtmlPathForRunProperty(elementType, defaultTagName) {\n    var path = findHtmlPath({\n      type: elementType\n    });\n    if (path) {\n      return path;\n    } else if (defaultTagName) {\n      return htmlPaths.element(defaultTagName, {}, {\n        fresh: false\n      });\n    } else {\n      return htmlPaths.empty;\n    }\n  }\n  function findHtmlPath(element, defaultPath) {\n    var style = findStyle(element);\n    return style ? style.to : defaultPath;\n  }\n  function findStyle(element) {\n    for (var i = 0; i < styleMap.length; i++) {\n      if (styleMap[i].from.matches(element)) {\n        return styleMap[i];\n      }\n    }\n  }\n  function recoveringConvertImage(convertImage) {\n    return function (image, messages) {\n      return promises.attempt(function () {\n        return convertImage(image, messages);\n      }).caught(function (error) {\n        messages.push(results.error(error));\n        return [];\n      });\n    };\n  }\n  function noteHtmlId(note) {\n    return referentHtmlId(note.noteType, note.noteId);\n  }\n  function noteRefHtmlId(note) {\n    return referenceHtmlId(note.noteType, note.noteId);\n  }\n  function referentHtmlId(referenceType, referenceId) {\n    return htmlId(referenceType + \"-\" + referenceId);\n  }\n  function referenceHtmlId(referenceType, referenceId) {\n    return htmlId(referenceType + \"-ref-\" + referenceId);\n  }\n  function htmlId(suffix) {\n    return idPrefix + suffix;\n  }\n  var defaultTablePath = htmlPaths.elements([htmlPaths.element(\"table\", {}, {\n    fresh: true\n  })]);\n  function convertTable(element, messages, options) {\n    return findHtmlPath(element, defaultTablePath).wrap(function () {\n      return convertTableChildren(element, messages, options);\n    });\n  }\n  function convertTableChildren(element, messages, options) {\n    var bodyIndex = _.findIndex(element.children, function (child) {\n      return !child.type === documents.types.tableRow || !child.isHeader;\n    });\n    if (bodyIndex === -1) {\n      bodyIndex = element.children.length;\n    }\n    var children;\n    if (bodyIndex === 0) {\n      children = convertElements(element.children, messages, _.extend({}, options, {\n        isTableHeader: false\n      }));\n    } else {\n      var headRows = convertElements(element.children.slice(0, bodyIndex), messages, _.extend({}, options, {\n        isTableHeader: true\n      }));\n      var bodyRows = convertElements(element.children.slice(bodyIndex), messages, _.extend({}, options, {\n        isTableHeader: false\n      }));\n      children = [Html.freshElement(\"thead\", {}, headRows), Html.freshElement(\"tbody\", {}, bodyRows)];\n    }\n    return [Html.forceWrite].concat(children);\n  }\n  function convertTableRow(element, messages, options) {\n    var children = convertElements(element.children, messages, options);\n    return [Html.freshElement(\"tr\", {}, [Html.forceWrite].concat(children))];\n  }\n  function convertTableCell(element, messages, options) {\n    var tagName = options.isTableHeader ? \"th\" : \"td\";\n    var children = convertElements(element.children, messages, options);\n    var attributes = {};\n    if (element.colSpan !== 1) {\n      attributes.colspan = element.colSpan.toString();\n    }\n    if (element.rowSpan !== 1) {\n      attributes.rowspan = element.rowSpan.toString();\n    }\n    return [Html.freshElement(tagName, attributes, [Html.forceWrite].concat(children))];\n  }\n  function convertCommentReference(reference, messages, options) {\n    return findHtmlPath(reference, htmlPaths.ignore).wrap(function () {\n      var comment = comments[reference.commentId];\n      var count = referencedComments.length + 1;\n      var label = \"[\" + commentAuthorLabel(comment) + count + \"]\";\n      referencedComments.push({\n        label: label,\n        comment: comment\n      });\n      // TODO: remove duplication with note references\n      return [Html.freshElement(\"a\", {\n        href: \"#\" + referentHtmlId(\"comment\", reference.commentId),\n        id: referenceHtmlId(\"comment\", reference.commentId)\n      }, [Html.text(label)])];\n    });\n  }\n  function convertComment(referencedComment, messages, options) {\n    // TODO: remove duplication with note references\n\n    var label = referencedComment.label;\n    var comment = referencedComment.comment;\n    var body = convertElements(comment.body, messages, options).concat([Html.nonFreshElement(\"p\", {}, [Html.text(\" \"), Html.freshElement(\"a\", {\n      \"href\": \"#\" + referenceHtmlId(\"comment\", comment.commentId)\n    }, [Html.text(\"â†‘\")])])]);\n    return [Html.freshElement(\"dt\", {\n      \"id\": referentHtmlId(\"comment\", comment.commentId)\n    }, [Html.text(\"Comment \" + label)]), Html.freshElement(\"dd\", {}, body)];\n  }\n  function convertBreak(element, messages, options) {\n    return htmlPathForBreak(element).wrap(function () {\n      return [];\n    });\n  }\n  function htmlPathForBreak(element) {\n    var style = findStyle(element);\n    if (style) {\n      return style.to;\n    } else if (element.breakType === \"line\") {\n      return htmlPaths.topLevelElement(\"br\");\n    } else {\n      return htmlPaths.empty;\n    }\n  }\n  var elementConverters = {\n    \"document\": function (document, messages, options) {\n      var children = convertElements(document.children, messages, options);\n      var notes = noteReferences.map(function (noteReference) {\n        return document.notes.resolve(noteReference);\n      });\n      var notesNodes = convertElements(notes, messages, options);\n      return children.concat([Html.freshElement(\"ol\", {}, notesNodes), Html.freshElement(\"dl\", {}, flatMap(referencedComments, function (referencedComment) {\n        return convertComment(referencedComment, messages, options);\n      }))]);\n    },\n    \"paragraph\": convertParagraph,\n    \"run\": convertRun,\n    \"text\": function (element, messages, options) {\n      return [Html.text(element.value)];\n    },\n    \"tab\": function (element, messages, options) {\n      return [Html.text(\"\\t\")];\n    },\n    \"hyperlink\": function (element, messages, options) {\n      var href = element.anchor ? \"#\" + htmlId(element.anchor) : element.href;\n      var attributes = {\n        href: href\n      };\n      if (element.targetFrame != null) {\n        attributes.target = element.targetFrame;\n      }\n      var children = convertElements(element.children, messages, options);\n      return [Html.nonFreshElement(\"a\", attributes, children)];\n    },\n    \"checkbox\": function (element) {\n      var attributes = {\n        type: \"checkbox\"\n      };\n      if (element.checked) {\n        attributes[\"checked\"] = \"checked\";\n      }\n      return [Html.freshElement(\"input\", attributes)];\n    },\n    \"bookmarkStart\": function (element, messages, options) {\n      var anchor = Html.freshElement(\"a\", {\n        id: htmlId(element.name)\n      }, [Html.forceWrite]);\n      return [anchor];\n    },\n    \"noteReference\": function (element, messages, options) {\n      noteReferences.push(element);\n      var anchor = Html.freshElement(\"a\", {\n        href: \"#\" + noteHtmlId(element),\n        id: noteRefHtmlId(element)\n      }, [Html.text(\"[\" + noteNumber++ + \"]\")]);\n      return [Html.freshElement(\"sup\", {}, [anchor])];\n    },\n    \"note\": function (element, messages, options) {\n      var children = convertElements(element.body, messages, options);\n      var backLink = Html.elementWithTag(htmlPaths.element(\"p\", {}, {\n        fresh: false\n      }), [Html.text(\" \"), Html.freshElement(\"a\", {\n        href: \"#\" + noteRefHtmlId(element)\n      }, [Html.text(\"â†‘\")])]);\n      var body = children.concat([backLink]);\n      return Html.freshElement(\"li\", {\n        id: noteHtmlId(element)\n      }, body);\n    },\n    \"commentReference\": convertCommentReference,\n    \"comment\": convertComment,\n    \"image\": deferredConversion(recoveringConvertImage(options.convertImage || images.dataUri)),\n    \"table\": convertTable,\n    \"tableRow\": convertTableRow,\n    \"tableCell\": convertTableCell,\n    \"break\": convertBreak\n  };\n  return {\n    convertToHtml: convertToHtml\n  };\n}\nvar deferredId = 1;\nfunction deferredConversion(func) {\n  return function (element, messages, options) {\n    return [{\n      type: \"deferred\",\n      id: deferredId++,\n      value: function () {\n        return func(element, messages, options);\n      }\n    }];\n  };\n}\nfunction unrecognisedStyleWarning(type, element) {\n  return results.warning(\"Unrecognised \" + type + \" style: '\" + element.styleName + \"'\" + \" (Style ID: \" + element.styleId + \")\");\n}\nfunction flatMap(values, func) {\n  return _.flatten(values.map(func), true);\n}\nfunction walkHtml(nodes, callback) {\n  nodes.forEach(function (node) {\n    callback(node);\n    if (node.children) {\n      walkHtml(node.children, callback);\n    }\n  });\n}\nvar commentAuthorLabel = exports.commentAuthorLabel = function commentAuthorLabel(comment) {\n  return comment.authorInitials || \"\";\n};","map":{"version":3,"names":["_","require","promises","documents","htmlPaths","results","images","Html","writers","exports","DocumentConverter","options","convertToHtml","element","comments","indexBy","type","types","document","conversion","DocumentConversion","noteNumber","noteReferences","referencedComments","extend","ignoreEmptyParagraphs","idPrefix","undefined","defaultParagraphStyle","topLevelElement","styleMap","messages","html","elementToHtml","deferredNodes","walkHtml","node","push","deferredValues","mapSeries","deferred","value","then","id","replaceDeferred","nodes","flatMap","children","writer","prettyPrint","outputFormat","write","simplify","Result","asString","convertElements","elements","Error","handler","elementConverters","convertParagraph","htmlPathForParagraph","wrap","content","forceWrite","concat","style","findStyle","to","styleId","unrecognisedStyleWarning","convertRun","run","paths","highlight","path","findHtmlPath","color","isSmallCaps","findHtmlPathForRunProperty","isAllCaps","isStrikethrough","isUnderline","verticalAlignment","subscript","fresh","superscript","isItalic","isBold","stylePath","empty","forEach","bind","elementType","defaultTagName","defaultPath","i","length","from","matches","recoveringConvertImage","convertImage","image","attempt","caught","error","noteHtmlId","note","referentHtmlId","noteType","noteId","noteRefHtmlId","referenceHtmlId","referenceType","referenceId","htmlId","suffix","defaultTablePath","convertTable","convertTableChildren","bodyIndex","findIndex","child","tableRow","isHeader","isTableHeader","headRows","slice","bodyRows","freshElement","convertTableRow","convertTableCell","tagName","attributes","colSpan","colspan","toString","rowSpan","rowspan","convertCommentReference","reference","ignore","comment","commentId","count","label","commentAuthorLabel","href","text","convertComment","referencedComment","body","nonFreshElement","convertBreak","htmlPathForBreak","breakType","notes","map","noteReference","resolve","notesNodes","tab","hyperlink","anchor","targetFrame","target","checkbox","checked","bookmarkStart","name","backLink","elementWithTag","deferredConversion","dataUri","deferredId","func","warning","styleName","values","flatten","callback","authorInitials"],"sources":["D:/sumit/hfc/wrm/node_modules/mammoth/lib/document-to-html.js"],"sourcesContent":["var _ = require(\"underscore\");\n\nvar promises = require(\"./promises\");\nvar documents = require(\"./documents\");\nvar htmlPaths = require(\"./styles/html-paths\");\nvar results = require(\"./results\");\nvar images = require(\"./images\");\nvar Html = require(\"./html\");\nvar writers = require(\"./writers\");\n\nexports.DocumentConverter = DocumentConverter;\n\n\nfunction DocumentConverter(options) {\n    return {\n        convertToHtml: function(element) {\n            var comments = _.indexBy(\n                element.type === documents.types.document ? element.comments : [],\n                \"commentId\"\n            );\n            var conversion = new DocumentConversion(options, comments);\n            return conversion.convertToHtml(element);\n        }\n    };\n}\n\nfunction DocumentConversion(options, comments) {\n    var noteNumber = 1;\n\n    var noteReferences = [];\n\n    var referencedComments = [];\n\n    options = _.extend({ignoreEmptyParagraphs: true}, options);\n    var idPrefix = options.idPrefix === undefined ? \"\" : options.idPrefix;\n    var ignoreEmptyParagraphs = options.ignoreEmptyParagraphs;\n\n    var defaultParagraphStyle = htmlPaths.topLevelElement(\"p\");\n\n    var styleMap = options.styleMap || [];\n\n    function convertToHtml(document) {\n        var messages = [];\n\n        var html = elementToHtml(document, messages, {});\n\n        var deferredNodes = [];\n        walkHtml(html, function(node) {\n            if (node.type === \"deferred\") {\n                deferredNodes.push(node);\n            }\n        });\n        var deferredValues = {};\n        return promises.mapSeries(deferredNodes, function(deferred) {\n            return deferred.value().then(function(value) {\n                deferredValues[deferred.id] = value;\n            });\n        }).then(function() {\n            function replaceDeferred(nodes) {\n                return flatMap(nodes, function(node) {\n                    if (node.type === \"deferred\") {\n                        return deferredValues[node.id];\n                    } else if (node.children) {\n                        return [\n                            _.extend({}, node, {\n                                children: replaceDeferred(node.children)\n                            })\n                        ];\n                    } else {\n                        return [node];\n                    }\n                });\n            }\n            var writer = writers.writer({\n                prettyPrint: options.prettyPrint,\n                outputFormat: options.outputFormat\n            });\n            Html.write(writer, Html.simplify(replaceDeferred(html)));\n            return new results.Result(writer.asString(), messages);\n        });\n    }\n\n    function convertElements(elements, messages, options) {\n        return flatMap(elements, function(element) {\n            return elementToHtml(element, messages, options);\n        });\n    }\n\n    function elementToHtml(element, messages, options) {\n        if (!options) {\n            throw new Error(\"options not set\");\n        }\n        var handler = elementConverters[element.type];\n        if (handler) {\n            return handler(element, messages, options);\n        } else {\n            return [];\n        }\n    }\n\n    function convertParagraph(element, messages, options) {\n        return htmlPathForParagraph(element, messages).wrap(function() {\n            var content = convertElements(element.children, messages, options);\n            if (ignoreEmptyParagraphs) {\n                return content;\n            } else {\n                return [Html.forceWrite].concat(content);\n            }\n        });\n    }\n\n    function htmlPathForParagraph(element, messages) {\n        var style = findStyle(element);\n\n        if (style) {\n            return style.to;\n        } else {\n            if (element.styleId) {\n                messages.push(unrecognisedStyleWarning(\"paragraph\", element));\n            }\n            return defaultParagraphStyle;\n        }\n    }\n\n    function convertRun(run, messages, options) {\n        var nodes = function() {\n            return convertElements(run.children, messages, options);\n        };\n        var paths = [];\n        if (run.highlight !== null) {\n            var path = findHtmlPath({type: \"highlight\", color: run.highlight});\n            if (path) {\n                paths.push(path);\n            }\n        }\n        if (run.isSmallCaps) {\n            paths.push(findHtmlPathForRunProperty(\"smallCaps\"));\n        }\n        if (run.isAllCaps) {\n            paths.push(findHtmlPathForRunProperty(\"allCaps\"));\n        }\n        if (run.isStrikethrough) {\n            paths.push(findHtmlPathForRunProperty(\"strikethrough\", \"s\"));\n        }\n        if (run.isUnderline) {\n            paths.push(findHtmlPathForRunProperty(\"underline\"));\n        }\n        if (run.verticalAlignment === documents.verticalAlignment.subscript) {\n            paths.push(htmlPaths.element(\"sub\", {}, {fresh: false}));\n        }\n        if (run.verticalAlignment === documents.verticalAlignment.superscript) {\n            paths.push(htmlPaths.element(\"sup\", {}, {fresh: false}));\n        }\n        if (run.isItalic) {\n            paths.push(findHtmlPathForRunProperty(\"italic\", \"em\"));\n        }\n        if (run.isBold) {\n            paths.push(findHtmlPathForRunProperty(\"bold\", \"strong\"));\n        }\n        var stylePath = htmlPaths.empty;\n        var style = findStyle(run);\n        if (style) {\n            stylePath = style.to;\n        } else if (run.styleId) {\n            messages.push(unrecognisedStyleWarning(\"run\", run));\n        }\n        paths.push(stylePath);\n\n        paths.forEach(function(path) {\n            nodes = path.wrap.bind(path, nodes);\n        });\n\n        return nodes();\n    }\n\n    function findHtmlPathForRunProperty(elementType, defaultTagName) {\n        var path = findHtmlPath({type: elementType});\n        if (path) {\n            return path;\n        } else if (defaultTagName) {\n            return htmlPaths.element(defaultTagName, {}, {fresh: false});\n        } else {\n            return htmlPaths.empty;\n        }\n    }\n\n    function findHtmlPath(element, defaultPath) {\n        var style = findStyle(element);\n        return style ? style.to : defaultPath;\n    }\n\n    function findStyle(element) {\n        for (var i = 0; i < styleMap.length; i++) {\n            if (styleMap[i].from.matches(element)) {\n                return styleMap[i];\n            }\n        }\n    }\n\n    function recoveringConvertImage(convertImage) {\n        return function(image, messages) {\n            return promises.attempt(function() {\n                return convertImage(image, messages);\n            }).caught(function(error) {\n                messages.push(results.error(error));\n                return [];\n            });\n        };\n    }\n\n    function noteHtmlId(note) {\n        return referentHtmlId(note.noteType, note.noteId);\n    }\n\n    function noteRefHtmlId(note) {\n        return referenceHtmlId(note.noteType, note.noteId);\n    }\n\n    function referentHtmlId(referenceType, referenceId) {\n        return htmlId(referenceType + \"-\" + referenceId);\n    }\n\n    function referenceHtmlId(referenceType, referenceId) {\n        return htmlId(referenceType + \"-ref-\" + referenceId);\n    }\n\n    function htmlId(suffix) {\n        return idPrefix + suffix;\n    }\n\n    var defaultTablePath = htmlPaths.elements([\n        htmlPaths.element(\"table\", {}, {fresh: true})\n    ]);\n\n    function convertTable(element, messages, options) {\n        return findHtmlPath(element, defaultTablePath).wrap(function() {\n            return convertTableChildren(element, messages, options);\n        });\n    }\n\n    function convertTableChildren(element, messages, options) {\n        var bodyIndex = _.findIndex(element.children, function(child) {\n            return !child.type === documents.types.tableRow || !child.isHeader;\n        });\n        if (bodyIndex === -1) {\n            bodyIndex = element.children.length;\n        }\n        var children;\n        if (bodyIndex === 0) {\n            children = convertElements(\n                element.children,\n                messages,\n                _.extend({}, options, {isTableHeader: false})\n            );\n        } else {\n            var headRows = convertElements(\n                element.children.slice(0, bodyIndex),\n                messages,\n                _.extend({}, options, {isTableHeader: true})\n            );\n            var bodyRows = convertElements(\n                element.children.slice(bodyIndex),\n                messages,\n                _.extend({}, options, {isTableHeader: false})\n            );\n            children = [\n                Html.freshElement(\"thead\", {}, headRows),\n                Html.freshElement(\"tbody\", {}, bodyRows)\n            ];\n        }\n        return [Html.forceWrite].concat(children);\n    }\n\n    function convertTableRow(element, messages, options) {\n        var children = convertElements(element.children, messages, options);\n        return [\n            Html.freshElement(\"tr\", {}, [Html.forceWrite].concat(children))\n        ];\n    }\n\n    function convertTableCell(element, messages, options) {\n        var tagName = options.isTableHeader ? \"th\" : \"td\";\n        var children = convertElements(element.children, messages, options);\n        var attributes = {};\n        if (element.colSpan !== 1) {\n            attributes.colspan = element.colSpan.toString();\n        }\n        if (element.rowSpan !== 1) {\n            attributes.rowspan = element.rowSpan.toString();\n        }\n\n        return [\n            Html.freshElement(tagName, attributes, [Html.forceWrite].concat(children))\n        ];\n    }\n\n    function convertCommentReference(reference, messages, options) {\n        return findHtmlPath(reference, htmlPaths.ignore).wrap(function() {\n            var comment = comments[reference.commentId];\n            var count = referencedComments.length + 1;\n            var label = \"[\" + commentAuthorLabel(comment) + count + \"]\";\n            referencedComments.push({label: label, comment: comment});\n            // TODO: remove duplication with note references\n            return [\n                Html.freshElement(\"a\", {\n                    href: \"#\" + referentHtmlId(\"comment\", reference.commentId),\n                    id: referenceHtmlId(\"comment\", reference.commentId)\n                }, [Html.text(label)])\n            ];\n        });\n    }\n\n    function convertComment(referencedComment, messages, options) {\n        // TODO: remove duplication with note references\n\n        var label = referencedComment.label;\n        var comment = referencedComment.comment;\n        var body = convertElements(comment.body, messages, options).concat([\n            Html.nonFreshElement(\"p\", {}, [\n                Html.text(\" \"),\n                Html.freshElement(\"a\", {\"href\": \"#\" + referenceHtmlId(\"comment\", comment.commentId)}, [\n                    Html.text(\"â†‘\")\n                ])\n            ])\n        ]);\n\n        return [\n            Html.freshElement(\n                \"dt\",\n                {\"id\": referentHtmlId(\"comment\", comment.commentId)},\n                [Html.text(\"Comment \" + label)]\n            ),\n            Html.freshElement(\"dd\", {}, body)\n        ];\n    }\n\n    function convertBreak(element, messages, options) {\n        return htmlPathForBreak(element).wrap(function() {\n            return [];\n        });\n    }\n\n    function htmlPathForBreak(element) {\n        var style = findStyle(element);\n        if (style) {\n            return style.to;\n        } else if (element.breakType === \"line\") {\n            return htmlPaths.topLevelElement(\"br\");\n        } else {\n            return htmlPaths.empty;\n        }\n    }\n\n    var elementConverters = {\n        \"document\": function(document, messages, options) {\n            var children = convertElements(document.children, messages, options);\n            var notes = noteReferences.map(function(noteReference) {\n                return document.notes.resolve(noteReference);\n            });\n            var notesNodes = convertElements(notes, messages, options);\n            return children.concat([\n                Html.freshElement(\"ol\", {}, notesNodes),\n                Html.freshElement(\"dl\", {}, flatMap(referencedComments, function(referencedComment) {\n                    return convertComment(referencedComment, messages, options);\n                }))\n            ]);\n        },\n        \"paragraph\": convertParagraph,\n        \"run\": convertRun,\n        \"text\": function(element, messages, options) {\n            return [Html.text(element.value)];\n        },\n        \"tab\": function(element, messages, options) {\n            return [Html.text(\"\\t\")];\n        },\n        \"hyperlink\": function(element, messages, options) {\n            var href = element.anchor ? \"#\" + htmlId(element.anchor) : element.href;\n            var attributes = {href: href};\n            if (element.targetFrame != null) {\n                attributes.target = element.targetFrame;\n            }\n\n            var children = convertElements(element.children, messages, options);\n            return [Html.nonFreshElement(\"a\", attributes, children)];\n        },\n        \"checkbox\": function(element) {\n            var attributes = {type: \"checkbox\"};\n            if (element.checked) {\n                attributes[\"checked\"] = \"checked\";\n            }\n            return [Html.freshElement(\"input\", attributes)];\n        },\n        \"bookmarkStart\": function(element, messages, options) {\n            var anchor = Html.freshElement(\"a\", {\n                id: htmlId(element.name)\n            }, [Html.forceWrite]);\n            return [anchor];\n        },\n        \"noteReference\": function(element, messages, options) {\n            noteReferences.push(element);\n            var anchor = Html.freshElement(\"a\", {\n                href: \"#\" + noteHtmlId(element),\n                id: noteRefHtmlId(element)\n            }, [Html.text(\"[\" + (noteNumber++) + \"]\")]);\n\n            return [Html.freshElement(\"sup\", {}, [anchor])];\n        },\n        \"note\": function(element, messages, options) {\n            var children = convertElements(element.body, messages, options);\n            var backLink = Html.elementWithTag(htmlPaths.element(\"p\", {}, {fresh: false}), [\n                Html.text(\" \"),\n                Html.freshElement(\"a\", {href: \"#\" + noteRefHtmlId(element)}, [Html.text(\"â†‘\")])\n            ]);\n            var body = children.concat([backLink]);\n\n            return Html.freshElement(\"li\", {id: noteHtmlId(element)}, body);\n        },\n        \"commentReference\": convertCommentReference,\n        \"comment\": convertComment,\n        \"image\": deferredConversion(recoveringConvertImage(options.convertImage || images.dataUri)),\n        \"table\": convertTable,\n        \"tableRow\": convertTableRow,\n        \"tableCell\": convertTableCell,\n        \"break\": convertBreak\n    };\n    return {\n        convertToHtml: convertToHtml\n    };\n}\n\nvar deferredId = 1;\n\nfunction deferredConversion(func) {\n    return function(element, messages, options) {\n        return [\n            {\n                type: \"deferred\",\n                id: deferredId++,\n                value: function() {\n                    return func(element, messages, options);\n                }\n            }\n        ];\n    };\n}\n\nfunction unrecognisedStyleWarning(type, element) {\n    return results.warning(\n        \"Unrecognised \" + type + \" style: '\" + element.styleName + \"'\" +\n        \" (Style ID: \" + element.styleId + \")\"\n    );\n}\n\nfunction flatMap(values, func) {\n    return _.flatten(values.map(func), true);\n}\n\nfunction walkHtml(nodes, callback) {\n    nodes.forEach(function(node) {\n        callback(node);\n        if (node.children) {\n            walkHtml(node.children, callback);\n        }\n    });\n}\n\nvar commentAuthorLabel = exports.commentAuthorLabel = function commentAuthorLabel(comment) {\n    return comment.authorInitials || \"\";\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}